#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define ll long long
#define fi first
#define se second
#define sz size()
#define pb push_back
#define vi vector<int>
#define vll vector<ll>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define FOR(i, a, b) for(int i =a; i <=b; i++)
#define FOD(i, a, b) for(int i =a; i >=b; i--)
#define INF INT_MAX
#define MASK(i) (1LL << (i))
#define BIT(x, i) (((x) >> (i)) & 1)
#define COUNT_ONE(x) __builtin_popcountll((x))
#define COUNT_LEAD_ZERO(x) __builtin_clzll((x))
#define COUNT_TRAIL_ZERO(x) __builtin_ctzll((x))
#define SHOW1(x) cout << #x << " = " << (x) << endl << flush
#define SHOW2(x, y) cout << #x << "=" << (x) << " " << #y << "=" << (y) << endl << flush
#define faster() ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);

const int maxn = 300000;
const int MOD = 1e9 + 9;
const int BASE = 256;

//HASH STRING (STRING s START IN INDEX 1)
ll pw[maxn + 5]; //pw[i]: 256 ^ i
ll invPw[maxn + 5]; // pw[i] ^ (MOD - 2)

ll h_a[maxn + 5]; //hs[i] hash xau s[1...i]
ll h_bb[maxn + 5]; //hs[i] hash xau s[1...i]
ll h_ccc[maxn + 5]; //hs[i] hash xau s[1...i]
ll h_tmp[maxn + 5]; //hs[i] hash xau s[1...i]

ll powMod(ll a, ll b){
    if(b == 0) return 1;
    ll half = powMod(a, b / 2);
    ll res = half * half % MOD;
    if(b & 1) res = res * a % MOD;
    return res;
}

void prepare(){
    pw[0] = 1;
    FOR(i, 1, maxn){
        pw[i] = pw[i-1] * BASE % MOD;
    }
    FOR(i, 0, maxn){
        invPw[i] = powMod(pw[i], MOD - 2);
    }
}

void calcHash(string s, ll hs[]){
    hs[0] = 0;
    FOR(i, 1, s.sz - 1){
        hs[i] = hs[i-1] + 1ll * (unsigned char)s[i] * pw[i - 1];
        hs[i] %= MOD;
    }
}

ll calcSegmentHash(ll hs[], int l, int r){
    return (hs[r] - hs[l - 1] + MOD) % MOD * invPw[l - 1] % MOD;
}

string a, b, c;

//check s2 la chuoi con s1
bool checkSubstring(string s1, ll h_s1[], string s2, ll h_s2[]){
    if(s2.sz > s1.sz) return false;

    FOR(i, s2.sz - 1, s1.sz - 1){
        if(h_s2[s2.sz - 1] == calcSegmentHash(h_s1, i - s2.sz + 2, i)) return true;
    }
    return false;
}
//dem max_len khi noi xau s1 + s2 + s3
int cal_max_len(string s1, ll h_s1[], string s2, ll h_s2[], string s3, ll h_s3[]){
    string s_tmp = " "; 
    int len = 0;
    int max_match = 0;
    //noi s1 + s2 = s_tmp
    bool isSubstring = false;
    if(s1.sz > s2.sz){
        isSubstring = checkSubstring(s1, h_s1, s2, h_s2);
        if(isSubstring) s_tmp = s1;
    }
    else{
        isSubstring = checkSubstring(s2, h_s2, s1, h_s1);
        if(isSubstring) s_tmp = s2;
    }

    if(!isSubstring){
        len = min(s1.sz, s2.sz) - 1;
        max_match = 0;
        FOR(i, 1, len){
            if(h_s2[i] == calcSegmentHash(h_s1, s1.sz - i, s1.sz - 1))
                max_match = max(max_match, i);
        }
        FOR(i, 1, s1.sz - 1) s_tmp += s1[i];
        FOR(i, max_match + 1, s2.sz - 1) s_tmp += s2[i]; 
    } 

    //noi s_tmp + s3
    calcHash(s_tmp, h_tmp);
    isSubstring = false;
    if(s_tmp.sz > s3.sz){
        isSubstring = checkSubstring(s_tmp, h_tmp, s3, h_s3);
        if(isSubstring) return s_tmp.sz - 1;
    }
    else{
        isSubstring = checkSubstring(s3, h_s3, s_tmp, h_tmp);
        if(isSubstring) return s3.sz - 1;
    }

    if(!isSubstring){
        len = min(s_tmp.sz, s3.sz) - 1;
        max_match = 0;
        FOR(i, 1, len){
            if(h_s3[i] == calcSegmentHash(h_tmp, s_tmp.sz - i, s_tmp.sz - 1))
                max_match = max(max_match, i);
        }
    }

    return s_tmp.sz - 1 + s3.sz - 1 - max_match;
}

void solve(){   
    cin >> a >> b >> c;
    a = " " + a; b = " " + b; c = " " + c;

    calcHash(a, h_a);
    calcHash(b, h_bb);
    calcHash(c, h_ccc);

    //process
    int len1 = cal_max_len(a, h_a, b, h_bb, c, h_ccc);
    int len2 = cal_max_len(a, h_a, c, h_ccc, b, h_bb);
    int len3 = cal_max_len(b, h_bb, a, h_a, c, h_ccc);
    int len4 = cal_max_len(b, h_bb, c, h_ccc, a, h_a);
    int len5 = cal_max_len(c, h_ccc, a, h_a, b, h_bb);
    int len6 = cal_max_len(c, h_ccc, b, h_bb, a, h_a);

    cout << min({len1, len2, len3, len4, len5, len6}) << endl;
}   


int main(){
    faster();
    prepare();
    int t = 1;
    // cin >> t;
    while(t--){
        solve();
    }
    return 0;
}

/** HungLam
	  (\(\
	 ( 0.0)
	o_(")(")
**/
/**
⣿⣛⢿⣛⢿⡙⣏⢻⡙⠏⠭⣉⠇⡹⢌⡣⡍⢭⠩⢥⢩⢡⡉⡜⣩⠈⠥⡉⢌⠡⡉⠎⡍⢭⠩⢍⠩⢯⠹⣍⢯⡙⢭⢫⡝⣭⠩⡉⢍⠩⡉⢍⡉⢣⠙⡌⢣⠉⢎⡝⢬⢣⡝⣬⢍⡭⣩⡙⣍⣋⡝⢣⠛⠬⢡⠉⠬⡑⢫⢻⡹⣍⡛⢿⣿⡏⠥⡉⢌⠡
⣷⣫⢾⡹⢮⡽⡘⢡⠘⣌⠲⣄⢺⡵⣋⠷⣹⢎⡗⣆⠒⡂⠖⠬⠤⡙⠤⡑⢌⠢⡑⢊⡜⢢⡝⢦⠳⣤⢣⠴⣠⢌⣄⢢⡑⡠⢃⠜⡠⢃⠜⡠⠘⡄⢣⠘⠤⣉⣦⢞⣭⣣⣼⡴⣎⣶⣥⣽⣦⣷⣼⢧⣛⣤⢂⠍⠤⡁⢎⡡⢓⠬⡙⢎⠳⢋⢦⠱⣌⢂
⣷⣫⢿⡝⣧⡓⣌⢡⠋⡔⢣⢎⡷⣱⡙⢮⠵⣎⠽⣎⠳⣌⠘⡄⢣⠘⠤⡑⢌⠢⣁⠣⡜⡡⠞⡥⢛⡔⢫⠞⡱⢎⡜⣣⢝⡱⣋⠞⡡⢊⠔⡡⢃⠜⣠⡿⣞⣿⡾⣿⢿⣿⣿⣽⣿⣿⢿⣟⣿⡽⣯⢿⣯⣟⡯⣞⠤⡑⢌⡒⢏⠶⡹⢎⠷⣊⢶⠡⢆⠂
⣿⡭⣗⡻⣞⠽⣈⢇⡛⡜⢣⢏⠶⣡⠏⣝⠺⣌⠳⣜⢣⡜⣰⠘⡤⣉⠆⡱⢈⠒⡄⠳⡐⢥⢫⡔⢣⠜⣥⢮⡵⣎⣴⡡⢎⡱⢡⠊⡔⢡⠊⣔⣥⣾⢿⣹⣽⣶⢿⣽⡾⣷⣿⣿⣿⣻⡿⣯⢿⡽⣯⣟⡾⣽⣻⡽⣾⣑⠪⡔⢪⡒⣥⢊⢦⡡⢎⡲⢈⠆
⣯⢳⡽⣫⣝⠲⠠⠎⡴⣉⠶⣈⠧⣡⢋⠬⡓⣌⠳⣌⠣⡜⣡⠛⡴⢉⠆⡱⢈⠒⡌⠣⡍⢆⡻⣜⢧⣛⡬⢷⢻⡽⣞⡽⣳⣌⢣⡙⣄⢣⣼⣟⣷⣯⣿⣿⣿⣾⣯⣷⣿⣿⣽⣯⣟⠿⣽⢏⣿⣱⢳⢮⢽⡘⢧⣻⡱⢻⢧⡙⢦⣡⢁⢎⡐⢩⠘⡄⠣⠌
⣯⢳⡽⣱⢏⣇⢣⠚⡴⣡⢾⣷⣿⣶⣿⣾⣷⣬⣷⣌⠳⡘⢤⢋⠴⡁⢎⠰⡁⢎⡐⢣⠜⡢⢝⣮⢳⣹⣾⣶⣦⣶⣤⣦⣥⣬⣡⣃⢬⣿⣿⣾⣿⣿⣿⣿⣿⡿⠿⠻⠟⠿⠿⢿⣿⣿⡽⣞⡷⣯⣟⣾⣳⣟⣧⢷⣹⢧⣯⡝⡦⢹⢎⠮⣙⠧⣛⠜⡱⢈
⡷⣏⠷⣭⢚⡬⢣⢏⠶⣡⢟⡼⣳⣟⣾⣽⣯⢿⣿⣿⢡⡙⢆⡑⢪⠐⡌⢢⠑⢢⠘⠤⢊⡕⢺⡜⣧⢏⡷⣭⢯⡝⣯⡝⢯⡻⡝⣱⣿⣿⣿⣿⣿⣿⣿⣿⠣⠐⡁⠂⠌⡐⢀⠂⡘⢿⣟⣯⣟⣷⣻⣞⣷⣻⣞⣯⣟⡿⣾⣽⣳⡅⢺⢦⡱⣎⡔⢣⠔⡡
⢝⡾⣹⢎⡳⣚⠵⣊⢿⡱⢎⢷⣻⡾⣽⡾⣯⣻⣿⣿⢠⡙⠦⣙⢢⠑⡌⢢⠉⢆⡉⢆⠣⡘⢥⣛⢾⣿⢿⡿⣿⣿⣳⡽⣣⢗⣸⣿⣿⣿⣿⣿⣿⣿⣿⠃⠄⠡⢀⠁⢂⠐⡀⢂⠐⡘⣿⢿⣞⣯⣷⣻⣞⣷⣻⢾⣽⣻⢷⣯⢷⣏⡆⢯⠱⣋⢞⡳⢎⡵
⢎⡷⣣⢞⡱⢫⡜⣡⣏⢷⣩⢺⣵⡿⣯⢿⣳⡽⣷⣿⢠⡙⢢⡑⢪⠐⡌⢢⠉⢆⡘⢄⠣⡑⢦⡙⣾⣿⢯⣟⡷⣿⣻⡵⣋⠦⣿⣿⣿⣿⣿⣿⣿⣽⡃⠌⠠⢁⠂⠌⡀⢂⡐⣀⠂⠄⢻⡏⣿⣽⣞⣷⣻⢾⡽⣯⣿⡽⣿⢾⣟⡾⣵⢪⡷⣷⠾⣶⢷⡾
⡿⣼⢳⢎⡱⢣⢞⡵⣮⣟⣯⢧⠻⣿⡽⣿⣳⣟⣿⣿⢠⡙⢆⡙⢦⠑⡌⢢⠉⢆⡘⢄⠣⣘⠢⡑⣯⣿⣻⢾⡽⣿⣟⠶⣁⢻⣿⣿⣿⣿⣿⣿⠇⡟⢣⠈⡐⠠⢈⠐⣈⠛⠭⡉⠏⡙⠺⡟⢿⣽⡾⣿⡽⣯⣟⡷⣿⣿⣻⢿⣯⣟⣧⠧⣿⣾⡿⣜⠧⢂
⡷⣭⣛⢎⡖⣹⢾⡽⣞⣿⣞⣯⢷⡹⣟⣯⣷⣞⣿⣷⢢⡙⢆⡙⢢⠑⡌⢢⠉⢆⡘⢄⠣⢄⠣⡘⡼⣿⠽⣯⢻⣿⣽⢣⡃⢾⣿⣿⣿⣿⣿⣟⣈⠧⡀⠡⢀⠁⠂⠔⡠⢉⠐⣀⣂⠄⠡⣟⢸⣹⢿⣿⣻⡷⣯⣟⣿⣿⣻⣿⣯⢿⣞⡯⢿⣽⡿⣜⡃⠆
⣻⢶⡙⡮⠜⣽⣫⢿⣟⣷⣻⣞⣯⢷⡹⣿⢾⡽⣿⣷⢢⡙⢆⡙⢦⠑⡌⢢⠉⢆⡘⢄⠣⢌⠢⢡⢹⣯⢻⡜⣯⣿⢯⡳⢌⣻⣿⣿⣿⣿⣿⠏⣽⣷⣧⠐⠠⢈⠐⡈⠰⣬⡷⢶⣮⣾⣥⣻⡸⢼⢺⣿⣯⣟⣷⣻⣿⣿⣿⣽⣿⣟⡾⣝⣻⢾⣟⡰⡁⠎
⣯⢞⡵⡹⣘⣧⣟⣿⣻⣞⣷⣻⣞⣯⢷⡘⢯⣟⣿⡷⢢⡙⢦⡙⢦⠘⡄⢣⠘⠤⡘⢄⠣⢌⠢⡁⢾⣜⣧⡻⣵⡿⣿⡱⢂⢽⣿⣿⣿⡧⢿⠂⣛⣿⣿⠆⡁⢂⠐⠄⠋⠔⡈⢲⣿⣿⣿⣿⣿⣿⣼⣿⣯⣿⣞⣿⢆⢹⣿⣟⣿⣾⣻⣟⡼⣻⣷⠰⡁⠎
⣯⢾⡱⢣⣜⡾⣽⡾⣟⣾⣳⣟⡾⣽⣻⢮⡱⣞⣿⡿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠒⡌⢢⠑⢮⡿⣞⡷⣹⣿⣻⢥⠃⢾⣿⣿⣿⣿⠹⡇⢸⣍⢻⡱⢀⠂⡘⠠⢁⠂⠄⣳⢻⡿⣿⢿⣿⠣⢼⣿⡿⣞⣯⡿⣌⢺⣿⣿⣿⡷⣿⡽⣼⣻⣧⢣⠑⡌
⣟⡮⣝⢣⠾⣽⡿⣽⣻⣞⡷⣯⣟⡷⣯⢿⡵⡜⣿⣿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠲⣌⢣⠉⡌⣉⠡⣉⠳⣉⠙⡊⢱⢈⣿⣿⣿⣿⡷⡈⢄⠓⡦⠃⠄⠂⠄⡁⠂⠌⠠⢙⢦⠹⡱⢚⠏⡰⣻⣿⣿⢿⣿⠗⡬⢻⣿⣿⣿⢿⣽⣟⢶⣻⣽⢂⠣⡐
⡿⡼⣡⢏⠿⣽⡿⣽⣳⢯⣟⡷⣯⢿⡽⣯⣟⡾⡜⣿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠒⡌⢦⠑⡌⢄⠣⢄⠳⢠⠙⡄⢣⠘⣼⣿⣿⣿⣿⠐⣌⠳⣄⠡⢈⠐⠠⢀⠡⢈⠐⡠⢌⠡⢁⠊⠴⣡⣿⣿⣿⣿⡿⡘⣜⣽⣿⣿⣿⣯⢿⣟⡎⢙⠣⡉⠖⡡
⣛⡵⣫⢞⣽⡿⣽⣳⢯⣟⡾⣽⢯⡿⣽⣳⢯⡿⣵⢎⠳⡘⢦⡙⢆⠘⡄⢣⠘⠤⡑⢌⠢⡙⢤⠃⡜⢠⠃⡌⢢⢁⠚⡄⢣⠘⡰⣿⣿⣿⣿⡌⠄⠡⢈⠐⠠⢈⠐⡀⠂⢌⠒⡡⢊⠐⠠⢉⡲⠝⣰⣿⢿⡽⣣⣵⣿⣿⣿⣿⣿⢾⣿⣻⠆⡡⢆⠡⡃⠔
⣯⢳⡝⣮⣿⣻⡽⡏⠿⣾⡽⣯⢿⣽⣳⢯⡿⣽⣻⢮⢇⡙⢦⡙⢆⠈⠄⡁⢊⠐⡁⢊⠐⡁⢂⠡⠈⠄⠡⢈⠐⡈⢂⠘⡀⢃⠰⣿⣿⣿⣿⣷⡈⠐⠠⢈⠐⡀⠂⠄⡁⢂⠐⡀⠂⠌⡐⠠⢁⢲⡿⢫⣿⣽⣿⣿⣿⣿⣿⣿⣿⢯⣿⣯⡇⡘⢄⠣⡘⠄
⢯⡳⡝⣾⡷⣿⣽⣃⠳⣌⢻⣽⡻⢎⡝⢪⣽⣳⢯⣟⣯⡜⢢⡙⢆⠙⢢⠙⢢⠙⡰⢉⠎⡱⢉⠎⡱⢉⠎⡡⢋⠜⡡⢊⡑⢊⠱⡟⣿⣿⣿⣿⣿⣆⡁⢂⠒⠄⡁⢂⠐⡀⠂⠄⡁⠂⠄⡁⢎⡝⢲⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣿⡳⠄⠦⠰⠄⢆
⣧⢹⢼⣿⣻⢷⣯⣇⢣⠘⠦⡘⠥⢃⠌⡳⣾⣽⣻⣞⣷⣛⢦⢉⠆⡘⠤⡉⢆⠱⣀⠣⡘⢄⠣⡘⢄⠣⡘⣤⢣⣜⡤⢃⡜⢠⢃⡇⢻⣿⣿⣿⣿⣿⣷⣄⠈⡐⢀⠂⡐⠠⢁⡂⢤⢃⠞⣩⠒⣌⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⢯⣷⣟⡌⢢⠑⡌⢂
⢶⣩⣾⡿⣽⣻⢞⡓⢎⡑⢢⠑⡌⠢⣌⠱⣟⣾⣳⣟⡾⣽⢯⡆⢣⠘⠤⡑⢌⠒⡄⢣⠘⡄⢣⠘⡄⢳⡿⣝⣯⢻⣽⡷⡈⢆⢸⢃⢹⣿⣿⣿⣿⣿⣿⣿⣧⣴⣦⣶⣷⢉⠧⡘⢦⡉⠞⡤⢋⠴⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣯⣿⣾⣄⢣⠘⣄
⢲⣣⣿⡛⡥⢃⠎⡘⠤⡘⢄⠣⡘⠵⡠⢙⡘⢷⣻⢾⡽⣯⣟⡾⣄⠍⢢⠑⡌⠒⡌⢢⠑⡎⠐⢂⠐⢫⡽⣞⢮⣟⣾⡳⡍⢂⢾⠀⢪⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠆⡬⡑⢦⡙⡜⡰⣉⠖⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣟⣷⣿⡞⣬⣳⢮
⢣⣟⣷⣿⣶⡿⣾⣴⣧⠒⠆⢦⣍⣦⣑⣂⡜⣨⣛⣯⣟⡷⣯⣟⠞⢎⠄⠣⢌⠱⡈⢆⠱⡸⢤⠈⡄⣹⢞⣭⠷⣞⣷⡟⡴⣉⡎⠄⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⠚⡰⣉⠦⡱⢌⡱⢌⡚⡔⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣯⣿⢿⡼⣯⣷
⣜⣾⢿⣳⢯⣟⣷⣻⣧⠩⣘⢯⡿⣽⣻⢿⣽⣻⡽⣾⣽⣫⠷⣉⠎⠸⡌⡱⢈⠆⡱⢈⠦⡑⢆⠱⡀⠽⠾⠭⠿⣽⣞⡿⢰⢱⡋⠔⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡟⠌⡬⠱⢌⠲⣑⢊⡔⢣⠜⡈⠤⢈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣾⢣⠙⠤⢉
⣼⣻⡿⣽⣻⣞⣷⣻⣧⠃⡜⣯⣟⡷⣯⣟⣾⣳⣟⡷⣯⢋⠲⡡⢎⠱⢸⡐⡡⢊⡔⢣⠜⡰⢈⠆⡱⢊⠧⡙⠶⢡⠒⡌⢣⡟⢤⣻⣿⣿⣿⣿⣿⣿⣟⣻⢋⢵⠲⣉⠖⣡⢋⡌⠳⣌⠲⠘⡁⢢⠘⠄⢊⠐⠠⢀⠉⡉⢉⠛⢿⣿⣿⣿⣿⣻⡆⣍⢢⣁
⡶⣿⣻⢷⣻⣞⣷⣻⣧⣧⣟⡷⣯⣟⣷⣻⣞⡷⣯⠟⣀⢊⡑⣈⢂⡑⢢⢱⡐⡡⣘⢂⡚⣐⢃⡚⡐⢊⠒⡐⣈⢂⡑⣈⡽⣨⣿⣿⣿⣿⣿⣿⣿⡟⢦⢣⢋⠴⡡⢌⡜⡰⠂⡌⠱⡀⢆⠑⡈⠄⡈⠐⠠⢈⠐⡀⢂⠐⠠⠈⠄⡈⢿⣿⣿⡿⡥⢆⠤⡀
⡽⣟⣯⣟⣷⣻⣞⣷⣻⢾⣭⣟⣷⣻⣞⡷⣯⡟⢣⢚⡤⠳⣌⡱⢎⡱⢣⢎⡴⢱⠌⡶⣑⢎⠶⡱⣍⢫⡍⢳⡜⣢⠳⣜⣷⣿⣿⣿⣿⣿⣿⣿⣿⡙⣎⢧⢋⠞⡱⠊⠔⡡⠁⠄⠡⡐⢂⠐⡀⠂⠄⡁⠂⠄⢂⠐⠠⠈⠄⡁⢂⠐⡀⢻⣿⣿⣿⢬⢤⡡
⣸⣿⣻⣞⣷⣻⣞⡷⣯⣟⡾⣽⣞⡷⣯⣟⠷⣉⠖⣣⠜⡳⢤⡙⣬⢃⡏⢶⡘⡆⢹⡒⠭⢎⣣⠳⣌⢣⡚⢥⢎⡱⣹⣾⣿⣿⣿⣿⣿⣿⣿⡿⢣⡑⢎⠦⣉⠎⠡⢈⠐⠠⠁⠌⡀⠇⡀⠂⠄⡁⠂⠄⠡⠈⠄⡈⠄⡁⢂⠐⡀⢂⠐⠨⣿⣿⣿⡞⢦⡹
⢾⣻⣷⣻⣞⡷⣯⣟⡷⣯⣟⡷⣯⣟⡷⢩⡒⣍⢚⡤⢋⡴⢣⡱⢆⡫⡜⢦⡹⣼⠀⣏⢧⡹⣐⢫⠜⢦⡙⡖⢪⢵⣿⣿⣿⣿⣿⣿⣿⣿⠏⡔⢣⡙⢌⠲⢁⠊⡐⠠⠈⠄⡁⠂⠄⠱⡀⢁⠂⢄⠡⠈⠄⡁⢂⠐⠠⠐⡀⢂⠐⠠⢈⠐⣿⣿⣿⣿⢣⡜
⣏⢿⣞⡷⣯⣟⡷⣯⣟⡷⣯⣟⣷⠫⣔⢣⠕⣎⠲⣼⣱⣜⣣⣕⣫⡖⣭⢃⡔⣠⢆⣈⠁⠓⡙⠮⣚⣥⠳⣜⢣⣿⣿⣿⣿⣿⣿⣿⠟⡡⠚⠌⠡⠈⠄⡂⠄⠂⠄⠡⢈⠐⡈⠔⡈⠄⢣⠀⠌⢢⠀⡁⢂⠐⠠⠈⠄⠡⠐⠠⢈⠐⠠⢈⣿⣿⣿⣯⡗⡸
⣟⣮⢻⣽⣳⢯⣟⡷⣯⣟⣷⣻⣇⠳⣌⠮⡜⣌⠳⣽⣻⣞⣯⣟⣷⢻⣽⣻⣞⣷⠋⠄⢋⠑⠒⠔⠤⣈⠙⡙⠯⢿⣿⣿⣿⣿⠟⡁⠊⠄⡉⠄⠡⢈⠢⠁⠌⡑⢈⠐⡀⢂⠐⠠⡐⠈⠄⡙⢌⣳⠀⡐⠠⠈⠄⠡⠈⠄⡁⠂⠄⡈⠐⢨⣿⣿⣿⣯⣗⡱
⡿⣮⢷⣭⣻⣟⡾⣽⣳⣿⣾⣿⡇⣹⠰⣓⠼⣌⠳⡽⢶⡹⢾⣿⣿⣿⣿⣷⣿⣾⣏⠾⡴⣌⡔⣈⠐⡀⢂⠐⡀⠂⠌⢻⡿⢁⠂⠄⡁⢂⠐⡈⠐⡀⢂⠁⠆⡐⢀⠂⡐⠠⢈⠐⠠⢁⠂⡐⠌⠒⠤⣀⠡⠈⠄⠡⢈⠐⠠⢁⠂⠄⡁⢺⣿⣿⣿⣷⣯⢶
⣹⢯⣟⣾⣳⢯⣟⡷⣯⢷⣿⣿⡇⢲⡙⣤⠛⡴⢩⡟⣭⢻⣽⡿⣿⣻⢿⣟⣯⡟⠠⠉⠌⡉⠑⠠⢁⠐⡀⠂⠄⠡⠈⠄⡐⢄⠈⡐⢀⢂⠐⠠⢁⠐⠠⢈⠐⠠⢂⠐⠠⢁⠂⠌⡐⢀⢂⠜⠠⠁⠆⠠⢉⠒⢌⡐⠠⢈⠐⠠⢈⠐⡀⢿⣿⣿⣿⣷⣿⣻
⢮⣛⢾⣳⣯⢿⡽⣿⣿⣿⢾⣿⡇⢇⡳⢔⡫⡜⢥⣻⡜⣣⢾⣿⣳⢿⣻⣯⣿⢿⣥⢫⣖⣤⠃⠆⠄⠂⠄⠡⠈⠄⡁⢂⠐⡈⢆⠐⠠⠈⠄⡁⠂⠌⡐⠠⢈⠐⠠⢈⠐⠠⢈⠐⡀⢂⡜⠠⢁⠘⡄⢁⠂⠌⠠⢈⠑⢂⠊⠴⠠⢂⠐⢻⣿⣿⣿⣿⣿⣿
⣏⢯⢳⡝⣾⣯⢿⣽⣿⡿⣯⣿⡇⢮⠱⢎⠵⢪⢱⡳⡜⡥⢿⣯⣿⣿⣯⡷⣿⣻⣷⠃⠌⠠⢉⠐⡈⠐⡈⠄⡁⢂⠐⡀⢂⠐⡈⢸⣗⡃⢆⠠⡁⠆⠠⢁⠂⡌⠐⠠⢈⠐⡀⢂⠰⢣⠜⡁⢢⠑⠄⠂⠌⠠⢁⠂⠌⠠⠈⠄⡁⠂⢌⣾⣿⣿⣿⣿⣿⣾
⣜⣎⢧⣞⣽⣞⡟⣾⣽⣻⣽⣿⡎⢲⡙⣬⠓⣭⠲⡽⣌⢳⣻⣟⣾⡿⣯⣟⡷⣿⡏⠜⣜⠳⣎⠶⣠⢃⡐⠠⠐⡀⢂⠐⡀⢂⠐⢸⠼⡍⠊⢖⡰⢌⡒⢌⡒⠤⢁⠂⠄⢂⠰⣈⢣⢃⠎⡠⢃⠌⠠⠁⠌⡐⠠⠈⠄⠡⢈⠐⠠⢁⣾⣿⣿⣿⣿⣿⣯⣟
⡷⣞⡷⣾⣻⢎⣿⣳⢿⣻⣾⣿⡇⡣⢕⢆⡛⡔⢫⠷⣌⠲⣽⣞⣷⣿⣳⣯⣟⡷⣯⡘⢤⠫⣔⢣⡕⢫⠔⣣⡑⣄⢂⠐⡀⠂⠌⣼⣏⠃⠌⠠⠙⡎⠸⢆⡹⢀⠣⣈⠰⣌⠲⡡⢎⡜⢠⡑⠠⠈⠄⡁⠂⠄⠡⠈⠄⡁⠂⠌⡐⣸⣿⣿⣿⣟⣿⣿⡷⣯
⢿⣽⣻⢷⣯⣟⡾⣽⢯⣿⣿⣿⡇⡹⡌⠮⢴⢩⢣⡟⡤⢛⣼⣟⡾⣿⣟⣷⢯⣿⡽⣟⣧⡳⢌⠣⡜⣡⠚⡤⢓⡌⣗⠺⣤⣣⣜⡷⡎⠐⡈⠄⣑⠂⡁⢂⠙⠪⡱⣌⠳⣌⢣⡑⢎⡜⠢⠐⠡⢈⠐⠠⠁⠌⠠⢁⠂⠄⡁⠂⢴⣿⣿⣿⢷⣻⣿⣿⣟⢷
⠳⡞⢿⢿⡾⣽⣻⣽⣻⢿⣿⣿⡇⢵⢊⡝⣆⢋⠶⣹⢆⡙⣾⣯⣟⣷⣻⣞⣯⡷⣿⣻⢾⡝⣯⢖⡱⢢⡙⡔⢣⠜⣬⢓⠦⣿⣿⣳⢉⢆⡐⢸⡰⢀⠐⠠⢈⠐⠠⢈⠑⠌⠓⡘⠃⠜⡡⢉⡐⠠⠈⠄⠡⢈⠐⠠⢈⠐⠠⣉⠞⠛⠿⣿⢯⣷⣻⡽⣮⣳
⠦⣘⡜⣮⣿⣳⢯⡶⣿⡿⣿⣿⡝⡢⢏⡴⢪⢍⠞⣵⢊⠴⣹⣿⢾⣳⣟⣾⣳⣟⣷⣻⢷⣻⣞⣯⡗⢣⠜⣌⢣⢚⡴⣋⢾⣿⣷⢯⡜⢢⡑⢣⠇⠠⢈⠐⠠⢈⠐⠠⠈⠄⡑⠤⣁⠂⠄⡑⠌⡓⡌⠠⢁⠂⠌⡐⠠⠈⢄⢃⠺⣟⢶⣌⢻⣯⣷⣿⣷⢯
⣿⣳⢿⣯⣷⣯⡿⣽⢶⣻⢿⣿⡧⣙⢎⡴⢋⡜⢮⡝⡎⡜⣹⡿⢯⣷⢯⣟⣿⡾⣯⣟⣯⢷⣻⡽⢌⡣⠞⡤⢃⠎⢶⡙⣮⠙⣎⢣⠚⣥⢊⠵⡈⠐⠠⢈⠐⠠⠈⠄⡁⢂⠐⠠⢀⠣⠐⡀⢂⡐⢡⠂⠄⡈⠐⠠⠁⠌⡜⣼⡆⢹⡆⢿⣆⢹⣿⡿⣝⡫
⣫⣽⡿⣾⣟⣾⣿⡿⣿⣯⣟⣿⡧⢍⠶⣘⢇⡺⣡⢟⡴⣉⢿⣽⣻⡾⣟⡿⣿⣿⣳⣯⣟⡿⢯⠓⣌⢳⡹⡰⣉⠞⡦⣙⠶⣉⢆⢣⡙⢤⢋⠞⠠⢁⠂⠄⡈⠄⡁⢂⠐⠠⢈⠐⡀⢂⠡⠐⠠⠘⠤⡉⢆⠠⢁⠂⡁⡾⢡⣿⣏⡄⢣⢚⣿⡄⣿⣟⣧⢿
⣽⣷⣻⢧⣿⣻⡽⣷⣣⣿⣞⣿⣇⢫⡜⡱⢎⡵⢊⡿⡰⢩⢾⡿⣽⡿⣽⡽⣳⢯⣿⡽⣿⡞⡅⢣⢌⢣⢳⡱⣌⠚⡴⣉⠾⣑⠎⢦⡙⢦⡉⢎⠐⠠⢈⠐⡀⢂⠐⠠⢈⠐⡀⢂⠐⡀⢂⠁⢂⠁⢢⠑⠌⠒⡀⢂⣼⠃⣿⢼⡷⢸⡀⢎⡿⠄⣻⣟⡾⣟
⣿⢾⣯⣟⣾⣽⣿⣳⣟⡾⣽⣾⡇⣇⢚⠵⣩⠖⡭⣞⠥⣋⢾⣟⡿⣽⣷⣻⣽⣻⣾⣟⣿⣳⠈⠆⡌⢂⠣⢱⣎⠓⡰⢡⢏⡇⡚⢤⡙⠦⡙⢆⠈⡐⢀⠂⡐⠠⢈⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡈⠄⠩⢀⠡⠐⣰⣿⠀⣿⢺⣿⠰⡇⠌⡟⢰⡿⣽⣻⡽
⣿⣻⢷⣻⢯⡿⣟⡿⣿⣿⣿⣿⡗⡬⢍⡞⣡⢞⡱⣏⡖⣡⢿⣻⡼⢧⣛⢿⣻⢿⣽⣾⢯⣿⣷⣌⡰⢁⠎⡔⢎⠰⢡⢋⢾⠰⣉⠦⡙⢆⠱⣂⠐⡀⢂⠐⠠⢁⠂⡐⢀⠂⡐⢀⠂⠌⠠⢁⠂⡐⢈⠐⡀⢂⢡⣿⣿⣧⠘⢯⣿⡐⣏⠰⢰⡿⣹⣗⢯⣟
⣿⣻⢯⡿⣿⡽⣞⡽⣯⣿⢿⣿⡧⢱⢎⡼⠱⢎⡱⣏⠖⣡⢾⡿⣽⣏⡟⡾⢭⣛⣾⣻⣿⣾⣳⣟⡿⣷⠎⡜⢢⢁⢃⠎⣇⠳⣌⠲⣉⢆⠳⠌⡆⠐⠠⢈⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡁⢂⠐⡀⢂⡐⢰⠼⣿⢿⣿⡿⣟⣦⢤⡥⣔⢻⡄⣿⡳⢎⡳⣮
⣾⡽⣯⣟⣷⣻⣽⣻⣽⣯⣿⣿⣇⠓⡮⢜⡹⢬⠱⣏⡳⢌⢾⡿⣷⢯⡿⣽⣳⡽⡶⢯⣻⢿⣿⣯⡟⢞⡱⢌⠡⢎⠢⣙⢆⠳⣌⠳⡌⠦⡉⠖⣨⢃⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡁⢂⠐⡀⢂⠄⣣⢜⠣⠒⡈⢿⣟⣿⣻⣽⣎⣷⡩⣾⠆⣸⣿⣭⡷⣟
⠥⣫⢕⡛⡞⡽⢳⠟⡷⢯⢾⣿⡧⢹⡘⣥⢋⠶⣙⢮⡓⡜⣺⢿⣽⣻⡽⣷⢯⣷⣟⣯⣟⣯⢿⣽⣚⠆⡘⢄⠣⢌⠢⡍⢎⡱⢌⠳⣌⢣⡙⣌⠲⡌⢆⠐⡀⢂⠐⠠⠈⠄⡁⢂⠰⡀⢎⠴⡡⢎⡱⢎⡑⠠⠐⡈⢿⣿⣟⡷⣯⢞⣷⣹⠇⣼⣷⣯⢿⣽
⠴⣡⢎⡴⣡⠜⣡⢋⡜⣡⠛⠞⢧⠣⡝⡆⢏⡎⡱⢏⡳⡘⢽⠻⢾⢳⢿⣽⣻⢷⣻⣟⣾⡿⣯⣿⢷⣮⣴⣎⣔⣈⠖⡩⢆⡱⢊⠵⣈⠦⡱⢌⠳⡌⡘⡄⠐⠠⠈⠤⣑⢤⠱⣌⠲⡙⣌⠲⡑⢎⠔⡡⠄⡁⢂⠐⡈⢿⣾⣽⣳⢯⣷⢯⡀⣿⣳⣯⢿⣽
⡜⣡⠞⣰⠣⣝⢢⠳⣘⢆⠻⡜⢦⡛⡼⣘⢣⡜⣱⡉⢖⡩⢆⠫⡜⣌⠒⠦⡙⢎⠵⣩⢳⠻⣝⣫⢟⡻⣟⠿⡷⡌⢧⡑⢎⠴⣉⠖⡡⢎⡱⢊⠵⣘⠴⢁⡌⠴⣉⠖⡡⢎⡱⢌⢣⠱⣌⠣⠁⠌⠂⠄⢣⠐⡀⢂⠐⡈⢳⣯⣟⡿⣞⡿⣽⣻⡽⣯⢿⣹
**/