#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define ll long long
#define fi first
#define se second
#define sz size()
#define pb push_back
#define vi vector<int>
#define vll vector<ll>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define FOR(i, a, b) for(int i =a; i <=b; i++)
#define FOD(i, a, b) for(int i =a; i >=b; i--)
#define INF INT_MAX
#define MASK(i) (1LL << (i))
#define BIT(x, i) (((x) >> (i)) & 1)
#define COUNT_ONE(x) __builtin_popcountll((x))
#define COUNT_LEAD_ZERO(x) __builtin_clzll((x))
#define COUNT_TRAIL_ZERO(x) __builtin_ctzll((x))
#define SHOW1(x) cout << #x << " = " << (x) << endl << flush
#define SHOW2(x, y) cout << #x << "=" << (x) << " " << #y << "=" << (y) << endl << flush
#define faster() ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);

const int maxn = 100000;
const int MOD = 1e9 + 7;
const int BASE = 256;

vi a;

struct SegmentTree{
    int n;
    vector<multiset<int>> tree;

    SegmentTree(int _n){
        n = _n;
        tree.assign(4*n + 5, multiset<int>());
    }
    

    void build(int id, int tl, int tr){
        if(tl == tr){
            tree[id].insert(a[tl]);
            return;
        }

        int mid = (tl + tr) >> 1;
        build(2*id, tl, mid);
        build(2*id+1, mid+1, tr);

        tree[id].insert(tree[2*id].begin(), tree[2*id].end());
        tree[id].insert(tree[2*id+1].begin(), tree[2*id+1].end());
    }
    void update(int id, int tl, int tr, int pos, int oldVal, int val){

        tree[id].erase(tree[id].find(oldVal));
        tree[id].insert(val);

        if(tl == tr){
            return;
        }

        int mid = (tl + tr) >> 1;
        if(pos <= mid) update(2*id, tl, mid, pos, oldVal, val);
        else           update(2*id+1, mid+1, tr, pos, oldVal, val);
    }

    int get(int id, int tl, int tr, int u, int v, int X){
        if(tl > v || tr < u) return INT_MAX;
        if(u <= tl && tr <= v){
            auto it = tree[id].upper_bound(X);
            return (it == tree[id].end() ? INT_MAX : *it);
        }

        int mid = (tl + tr) >> 1;
        return min(get(2*id, tl, mid, u, v, X), get(2*id+1, mid+1, tr, u, v, X));
    }

};
void solve(){   
    int n, m; cin >> n >> m;

    a.resize(n+1);
    FOR(i, 1, n){
        cin >> a[i];
    }

    SegmentTree segTree(n);
    segTree.build(1, 1, n);

    while(m--){
        int type, u, v; cin >> type >> u >> v;
        if(type == 1){
            segTree.update(1, 1, n, u, a[u], v);
            a[u] = v;
        }
        if(type == 2){
            int X; cin >> X;
            int res = segTree.get(1, 1, n, u, v, X);
            cout << (res == INT_MAX? -1 : res) << endl;
        }
    }
}   


int main(){
    faster();
    int t = 1;
    // cin >> t;
    while(t--){
        solve();
    }
    return 0;
}

/** HungLam
	  (\(\
	 ( 0.0)
	o_(")(")
**/
/**
⣿⣛⢿⣛⢿⡙⣏⢻⡙⠏⠭⣉⠇⡹⢌⡣⡍⢭⠩⢥⢩⢡⡉⡜⣩⠈⠥⡉⢌⠡⡉⠎⡍⢭⠩⢍⠩⢯⠹⣍⢯⡙⢭⢫⡝⣭⠩⡉⢍⠩⡉⢍⡉⢣⠙⡌⢣⠉⢎⡝⢬⢣⡝⣬⢍⡭⣩⡙⣍⣋⡝⢣⠛⠬⢡⠉⠬⡑⢫⢻⡹⣍⡛⢿⣿⡏⠥⡉⢌⠡
⣷⣫⢾⡹⢮⡽⡘⢡⠘⣌⠲⣄⢺⡵⣋⠷⣹⢎⡗⣆⠒⡂⠖⠬⠤⡙⠤⡑⢌⠢⡑⢊⡜⢢⡝⢦⠳⣤⢣⠴⣠⢌⣄⢢⡑⡠⢃⠜⡠⢃⠜⡠⠘⡄⢣⠘⠤⣉⣦⢞⣭⣣⣼⡴⣎⣶⣥⣽⣦⣷⣼⢧⣛⣤⢂⠍⠤⡁⢎⡡⢓⠬⡙⢎⠳⢋⢦⠱⣌⢂
⣷⣫⢿⡝⣧⡓⣌⢡⠋⡔⢣⢎⡷⣱⡙⢮⠵⣎⠽⣎⠳⣌⠘⡄⢣⠘⠤⡑⢌⠢⣁⠣⡜⡡⠞⡥⢛⡔⢫⠞⡱⢎⡜⣣⢝⡱⣋⠞⡡⢊⠔⡡⢃⠜⣠⡿⣞⣿⡾⣿⢿⣿⣿⣽⣿⣿⢿⣟⣿⡽⣯⢿⣯⣟⡯⣞⠤⡑⢌⡒⢏⠶⡹⢎⠷⣊⢶⠡⢆⠂
⣿⡭⣗⡻⣞⠽⣈⢇⡛⡜⢣⢏⠶⣡⠏⣝⠺⣌⠳⣜⢣⡜⣰⠘⡤⣉⠆⡱⢈⠒⡄⠳⡐⢥⢫⡔⢣⠜⣥⢮⡵⣎⣴⡡⢎⡱⢡⠊⡔⢡⠊⣔⣥⣾⢿⣹⣽⣶⢿⣽⡾⣷⣿⣿⣿⣻⡿⣯⢿⡽⣯⣟⡾⣽⣻⡽⣾⣑⠪⡔⢪⡒⣥⢊⢦⡡⢎⡲⢈⠆
⣯⢳⡽⣫⣝⠲⠠⠎⡴⣉⠶⣈⠧⣡⢋⠬⡓⣌⠳⣌⠣⡜⣡⠛⡴⢉⠆⡱⢈⠒⡌⠣⡍⢆⡻⣜⢧⣛⡬⢷⢻⡽⣞⡽⣳⣌⢣⡙⣄⢣⣼⣟⣷⣯⣿⣿⣿⣾⣯⣷⣿⣿⣽⣯⣟⠿⣽⢏⣿⣱⢳⢮⢽⡘⢧⣻⡱⢻⢧⡙⢦⣡⢁⢎⡐⢩⠘⡄⠣⠌
⣯⢳⡽⣱⢏⣇⢣⠚⡴⣡⢾⣷⣿⣶⣿⣾⣷⣬⣷⣌⠳⡘⢤⢋⠴⡁⢎⠰⡁⢎⡐⢣⠜⡢⢝⣮⢳⣹⣾⣶⣦⣶⣤⣦⣥⣬⣡⣃⢬⣿⣿⣾⣿⣿⣿⣿⣿⡿⠿⠻⠟⠿⠿⢿⣿⣿⡽⣞⡷⣯⣟⣾⣳⣟⣧⢷⣹⢧⣯⡝⡦⢹⢎⠮⣙⠧⣛⠜⡱⢈
⡷⣏⠷⣭⢚⡬⢣⢏⠶⣡⢟⡼⣳⣟⣾⣽⣯⢿⣿⣿⢡⡙⢆⡑⢪⠐⡌⢢⠑⢢⠘⠤⢊⡕⢺⡜⣧⢏⡷⣭⢯⡝⣯⡝⢯⡻⡝⣱⣿⣿⣿⣿⣿⣿⣿⣿⠣⠐⡁⠂⠌⡐⢀⠂⡘⢿⣟⣯⣟⣷⣻⣞⣷⣻⣞⣯⣟⡿⣾⣽⣳⡅⢺⢦⡱⣎⡔⢣⠔⡡
⢝⡾⣹⢎⡳⣚⠵⣊⢿⡱⢎⢷⣻⡾⣽⡾⣯⣻⣿⣿⢠⡙⠦⣙⢢⠑⡌⢢⠉⢆⡉⢆⠣⡘⢥⣛⢾⣿⢿⡿⣿⣿⣳⡽⣣⢗⣸⣿⣿⣿⣿⣿⣿⣿⣿⠃⠄⠡⢀⠁⢂⠐⡀⢂⠐⡘⣿⢿⣞⣯⣷⣻⣞⣷⣻⢾⣽⣻⢷⣯⢷⣏⡆⢯⠱⣋⢞⡳⢎⡵
⢎⡷⣣⢞⡱⢫⡜⣡⣏⢷⣩⢺⣵⡿⣯⢿⣳⡽⣷⣿⢠⡙⢢⡑⢪⠐⡌⢢⠉⢆⡘⢄⠣⡑⢦⡙⣾⣿⢯⣟⡷⣿⣻⡵⣋⠦⣿⣿⣿⣿⣿⣿⣿⣽⡃⠌⠠⢁⠂⠌⡀⢂⡐⣀⠂⠄⢻⡏⣿⣽⣞⣷⣻⢾⡽⣯⣿⡽⣿⢾⣟⡾⣵⢪⡷⣷⠾⣶⢷⡾
⡿⣼⢳⢎⡱⢣⢞⡵⣮⣟⣯⢧⠻⣿⡽⣿⣳⣟⣿⣿⢠⡙⢆⡙⢦⠑⡌⢢⠉⢆⡘⢄⠣⣘⠢⡑⣯⣿⣻⢾⡽⣿⣟⠶⣁⢻⣿⣿⣿⣿⣿⣿⠇⡟⢣⠈⡐⠠⢈⠐⣈⠛⠭⡉⠏⡙⠺⡟⢿⣽⡾⣿⡽⣯⣟⡷⣿⣿⣻⢿⣯⣟⣧⠧⣿⣾⡿⣜⠧⢂
⡷⣭⣛⢎⡖⣹⢾⡽⣞⣿⣞⣯⢷⡹⣟⣯⣷⣞⣿⣷⢢⡙⢆⡙⢢⠑⡌⢢⠉⢆⡘⢄⠣⢄⠣⡘⡼⣿⠽⣯⢻⣿⣽⢣⡃⢾⣿⣿⣿⣿⣿⣟⣈⠧⡀⠡⢀⠁⠂⠔⡠⢉⠐⣀⣂⠄⠡⣟⢸⣹⢿⣿⣻⡷⣯⣟⣿⣿⣻⣿⣯⢿⣞⡯⢿⣽⡿⣜⡃⠆
⣻⢶⡙⡮⠜⣽⣫⢿⣟⣷⣻⣞⣯⢷⡹⣿⢾⡽⣿⣷⢢⡙⢆⡙⢦⠑⡌⢢⠉⢆⡘⢄⠣⢌⠢⢡⢹⣯⢻⡜⣯⣿⢯⡳⢌⣻⣿⣿⣿⣿⣿⠏⣽⣷⣧⠐⠠⢈⠐⡈⠰⣬⡷⢶⣮⣾⣥⣻⡸⢼⢺⣿⣯⣟⣷⣻⣿⣿⣿⣽⣿⣟⡾⣝⣻⢾⣟⡰⡁⠎
⣯⢞⡵⡹⣘⣧⣟⣿⣻⣞⣷⣻⣞⣯⢷⡘⢯⣟⣿⡷⢢⡙⢦⡙⢦⠘⡄⢣⠘⠤⡘⢄⠣⢌⠢⡁⢾⣜⣧⡻⣵⡿⣿⡱⢂⢽⣿⣿⣿⡧⢿⠂⣛⣿⣿⠆⡁⢂⠐⠄⠋⠔⡈⢲⣿⣿⣿⣿⣿⣿⣼⣿⣯⣿⣞⣿⢆⢹⣿⣟⣿⣾⣻⣟⡼⣻⣷⠰⡁⠎
⣯⢾⡱⢣⣜⡾⣽⡾⣟⣾⣳⣟⡾⣽⣻⢮⡱⣞⣿⡿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠒⡌⢢⠑⢮⡿⣞⡷⣹⣿⣻⢥⠃⢾⣿⣿⣿⣿⠹⡇⢸⣍⢻⡱⢀⠂⡘⠠⢁⠂⠄⣳⢻⡿⣿⢿⣿⠣⢼⣿⡿⣞⣯⡿⣌⢺⣿⣿⣿⡷⣿⡽⣼⣻⣧⢣⠑⡌
⣟⡮⣝⢣⠾⣽⡿⣽⣻⣞⡷⣯⣟⡷⣯⢿⡵⡜⣿⣿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠲⣌⢣⠉⡌⣉⠡⣉⠳⣉⠙⡊⢱⢈⣿⣿⣿⣿⡷⡈⢄⠓⡦⠃⠄⠂⠄⡁⠂⠌⠠⢙⢦⠹⡱⢚⠏⡰⣻⣿⣿⢿⣿⠗⡬⢻⣿⣿⣿⢿⣽⣟⢶⣻⣽⢂⠣⡐
⡿⡼⣡⢏⠿⣽⡿⣽⣳⢯⣟⡷⣯⢿⡽⣯⣟⡾⡜⣿⢰⡉⢦⡙⢦⠘⡄⢣⠘⠤⡑⢌⠒⡌⢦⠑⡌⢄⠣⢄⠳⢠⠙⡄⢣⠘⣼⣿⣿⣿⣿⠐⣌⠳⣄⠡⢈⠐⠠⢀⠡⢈⠐⡠⢌⠡⢁⠊⠴⣡⣿⣿⣿⣿⡿⡘⣜⣽⣿⣿⣿⣯⢿⣟⡎⢙⠣⡉⠖⡡
⣛⡵⣫⢞⣽⡿⣽⣳⢯⣟⡾⣽⢯⡿⣽⣳⢯⡿⣵⢎⠳⡘⢦⡙⢆⠘⡄⢣⠘⠤⡑⢌⠢⡙⢤⠃⡜⢠⠃⡌⢢⢁⠚⡄⢣⠘⡰⣿⣿⣿⣿⡌⠄⠡⢈⠐⠠⢈⠐⡀⠂⢌⠒⡡⢊⠐⠠⢉⡲⠝⣰⣿⢿⡽⣣⣵⣿⣿⣿⣿⣿⢾⣿⣻⠆⡡⢆⠡⡃⠔
⣯⢳⡝⣮⣿⣻⡽⡏⠿⣾⡽⣯⢿⣽⣳⢯⡿⣽⣻⢮⢇⡙⢦⡙⢆⠈⠄⡁⢊⠐⡁⢊⠐⡁⢂⠡⠈⠄⠡⢈⠐⡈⢂⠘⡀⢃⠰⣿⣿⣿⣿⣷⡈⠐⠠⢈⠐⡀⠂⠄⡁⢂⠐⡀⠂⠌⡐⠠⢁⢲⡿⢫⣿⣽⣿⣿⣿⣿⣿⣿⣿⢯⣿⣯⡇⡘⢄⠣⡘⠄
⢯⡳⡝⣾⡷⣿⣽⣃⠳⣌⢻⣽⡻⢎⡝⢪⣽⣳⢯⣟⣯⡜⢢⡙⢆⠙⢢⠙⢢⠙⡰⢉⠎⡱⢉⠎⡱⢉⠎⡡⢋⠜⡡⢊⡑⢊⠱⡟⣿⣿⣿⣿⣿⣆⡁⢂⠒⠄⡁⢂⠐⡀⠂⠄⡁⠂⠄⡁⢎⡝⢲⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣿⡳⠄⠦⠰⠄⢆
⣧⢹⢼⣿⣻⢷⣯⣇⢣⠘⠦⡘⠥⢃⠌⡳⣾⣽⣻⣞⣷⣛⢦⢉⠆⡘⠤⡉⢆⠱⣀⠣⡘⢄⠣⡘⢄⠣⡘⣤⢣⣜⡤⢃⡜⢠⢃⡇⢻⣿⣿⣿⣿⣿⣷⣄⠈⡐⢀⠂⡐⠠⢁⡂⢤⢃⠞⣩⠒⣌⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⢯⣷⣟⡌⢢⠑⡌⢂
⢶⣩⣾⡿⣽⣻⢞⡓⢎⡑⢢⠑⡌⠢⣌⠱⣟⣾⣳⣟⡾⣽⢯⡆⢣⠘⠤⡑⢌⠒⡄⢣⠘⡄⢣⠘⡄⢳⡿⣝⣯⢻⣽⡷⡈⢆⢸⢃⢹⣿⣿⣿⣿⣿⣿⣿⣧⣴⣦⣶⣷⢉⠧⡘⢦⡉⠞⡤⢋⠴⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣯⣿⣾⣄⢣⠘⣄
⢲⣣⣿⡛⡥⢃⠎⡘⠤⡘⢄⠣⡘⠵⡠⢙⡘⢷⣻⢾⡽⣯⣟⡾⣄⠍⢢⠑⡌⠒⡌⢢⠑⡎⠐⢂⠐⢫⡽⣞⢮⣟⣾⡳⡍⢂⢾⠀⢪⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠆⡬⡑⢦⡙⡜⡰⣉⠖⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣟⣷⣿⡞⣬⣳⢮
⢣⣟⣷⣿⣶⡿⣾⣴⣧⠒⠆⢦⣍⣦⣑⣂⡜⣨⣛⣯⣟⡷⣯⣟⠞⢎⠄⠣⢌⠱⡈⢆⠱⡸⢤⠈⡄⣹⢞⣭⠷⣞⣷⡟⡴⣉⡎⠄⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⠚⡰⣉⠦⡱⢌⡱⢌⡚⡔⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣯⣿⢿⡼⣯⣷
⣜⣾⢿⣳⢯⣟⣷⣻⣧⠩⣘⢯⡿⣽⣻⢿⣽⣻⡽⣾⣽⣫⠷⣉⠎⠸⡌⡱⢈⠆⡱⢈⠦⡑⢆⠱⡀⠽⠾⠭⠿⣽⣞⡿⢰⢱⡋⠔⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡟⠌⡬⠱⢌⠲⣑⢊⡔⢣⠜⡈⠤⢈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣾⢣⠙⠤⢉
⣼⣻⡿⣽⣻⣞⣷⣻⣧⠃⡜⣯⣟⡷⣯⣟⣾⣳⣟⡷⣯⢋⠲⡡⢎⠱⢸⡐⡡⢊⡔⢣⠜⡰⢈⠆⡱⢊⠧⡙⠶⢡⠒⡌⢣⡟⢤⣻⣿⣿⣿⣿⣿⣿⣟⣻⢋⢵⠲⣉⠖⣡⢋⡌⠳⣌⠲⠘⡁⢢⠘⠄⢊⠐⠠⢀⠉⡉⢉⠛⢿⣿⣿⣿⣿⣻⡆⣍⢢⣁
⡶⣿⣻⢷⣻⣞⣷⣻⣧⣧⣟⡷⣯⣟⣷⣻⣞⡷⣯⠟⣀⢊⡑⣈⢂⡑⢢⢱⡐⡡⣘⢂⡚⣐⢃⡚⡐⢊⠒⡐⣈⢂⡑⣈⡽⣨⣿⣿⣿⣿⣿⣿⣿⡟⢦⢣⢋⠴⡡⢌⡜⡰⠂⡌⠱⡀⢆⠑⡈⠄⡈⠐⠠⢈⠐⡀⢂⠐⠠⠈⠄⡈⢿⣿⣿⡿⡥⢆⠤⡀
⡽⣟⣯⣟⣷⣻⣞⣷⣻⢾⣭⣟⣷⣻⣞⡷⣯⡟⢣⢚⡤⠳⣌⡱⢎⡱⢣⢎⡴⢱⠌⡶⣑⢎⠶⡱⣍⢫⡍⢳⡜⣢⠳⣜⣷⣿⣿⣿⣿⣿⣿⣿⣿⡙⣎⢧⢋⠞⡱⠊⠔⡡⠁⠄⠡⡐⢂⠐⡀⠂⠄⡁⠂⠄⢂⠐⠠⠈⠄⡁⢂⠐⡀⢻⣿⣿⣿⢬⢤⡡
⣸⣿⣻⣞⣷⣻⣞⡷⣯⣟⡾⣽⣞⡷⣯⣟⠷⣉⠖⣣⠜⡳⢤⡙⣬⢃⡏⢶⡘⡆⢹⡒⠭⢎⣣⠳⣌⢣⡚⢥⢎⡱⣹⣾⣿⣿⣿⣿⣿⣿⣿⡿⢣⡑⢎⠦⣉⠎⠡⢈⠐⠠⠁⠌⡀⠇⡀⠂⠄⡁⠂⠄⠡⠈⠄⡈⠄⡁⢂⠐⡀⢂⠐⠨⣿⣿⣿⡞⢦⡹
⢾⣻⣷⣻⣞⡷⣯⣟⡷⣯⣟⡷⣯⣟⡷⢩⡒⣍⢚⡤⢋⡴⢣⡱⢆⡫⡜⢦⡹⣼⠀⣏⢧⡹⣐⢫⠜⢦⡙⡖⢪⢵⣿⣿⣿⣿⣿⣿⣿⣿⠏⡔⢣⡙⢌⠲⢁⠊⡐⠠⠈⠄⡁⠂⠄⠱⡀⢁⠂⢄⠡⠈⠄⡁⢂⠐⠠⠐⡀⢂⠐⠠⢈⠐⣿⣿⣿⣿⢣⡜
⣏⢿⣞⡷⣯⣟⡷⣯⣟⡷⣯⣟⣷⠫⣔⢣⠕⣎⠲⣼⣱⣜⣣⣕⣫⡖⣭⢃⡔⣠⢆⣈⠁⠓⡙⠮⣚⣥⠳⣜⢣⣿⣿⣿⣿⣿⣿⣿⠟⡡⠚⠌⠡⠈⠄⡂⠄⠂⠄⠡⢈⠐⡈⠔⡈⠄⢣⠀⠌⢢⠀⡁⢂⠐⠠⠈⠄⠡⠐⠠⢈⠐⠠⢈⣿⣿⣿⣯⡗⡸
⣟⣮⢻⣽⣳⢯⣟⡷⣯⣟⣷⣻⣇⠳⣌⠮⡜⣌⠳⣽⣻⣞⣯⣟⣷⢻⣽⣻⣞⣷⠋⠄⢋⠑⠒⠔⠤⣈⠙⡙⠯⢿⣿⣿⣿⣿⠟⡁⠊⠄⡉⠄⠡⢈⠢⠁⠌⡑⢈⠐⡀⢂⠐⠠⡐⠈⠄⡙⢌⣳⠀⡐⠠⠈⠄⠡⠈⠄⡁⠂⠄⡈⠐⢨⣿⣿⣿⣯⣗⡱
⡿⣮⢷⣭⣻⣟⡾⣽⣳⣿⣾⣿⡇⣹⠰⣓⠼⣌⠳⡽⢶⡹⢾⣿⣿⣿⣿⣷⣿⣾⣏⠾⡴⣌⡔⣈⠐⡀⢂⠐⡀⠂⠌⢻⡿⢁⠂⠄⡁⢂⠐⡈⠐⡀⢂⠁⠆⡐⢀⠂⡐⠠⢈⠐⠠⢁⠂⡐⠌⠒⠤⣀⠡⠈⠄⠡⢈⠐⠠⢁⠂⠄⡁⢺⣿⣿⣿⣷⣯⢶
⣹⢯⣟⣾⣳⢯⣟⡷⣯⢷⣿⣿⡇⢲⡙⣤⠛⡴⢩⡟⣭⢻⣽⡿⣿⣻⢿⣟⣯⡟⠠⠉⠌⡉⠑⠠⢁⠐⡀⠂⠄⠡⠈⠄⡐⢄⠈⡐⢀⢂⠐⠠⢁⠐⠠⢈⠐⠠⢂⠐⠠⢁⠂⠌⡐⢀⢂⠜⠠⠁⠆⠠⢉⠒⢌⡐⠠⢈⠐⠠⢈⠐⡀⢿⣿⣿⣿⣷⣿⣻
⢮⣛⢾⣳⣯⢿⡽⣿⣿⣿⢾⣿⡇⢇⡳⢔⡫⡜⢥⣻⡜⣣⢾⣿⣳⢿⣻⣯⣿⢿⣥⢫⣖⣤⠃⠆⠄⠂⠄⠡⠈⠄⡁⢂⠐⡈⢆⠐⠠⠈⠄⡁⠂⠌⡐⠠⢈⠐⠠⢈⠐⠠⢈⠐⡀⢂⡜⠠⢁⠘⡄⢁⠂⠌⠠⢈⠑⢂⠊⠴⠠⢂⠐⢻⣿⣿⣿⣿⣿⣿
⣏⢯⢳⡝⣾⣯⢿⣽⣿⡿⣯⣿⡇⢮⠱⢎⠵⢪⢱⡳⡜⡥⢿⣯⣿⣿⣯⡷⣿⣻⣷⠃⠌⠠⢉⠐⡈⠐⡈⠄⡁⢂⠐⡀⢂⠐⡈⢸⣗⡃⢆⠠⡁⠆⠠⢁⠂⡌⠐⠠⢈⠐⡀⢂⠰⢣⠜⡁⢢⠑⠄⠂⠌⠠⢁⠂⠌⠠⠈⠄⡁⠂⢌⣾⣿⣿⣿⣿⣿⣾
⣜⣎⢧⣞⣽⣞⡟⣾⣽⣻⣽⣿⡎⢲⡙⣬⠓⣭⠲⡽⣌⢳⣻⣟⣾⡿⣯⣟⡷⣿⡏⠜⣜⠳⣎⠶⣠⢃⡐⠠⠐⡀⢂⠐⡀⢂⠐⢸⠼⡍⠊⢖⡰⢌⡒⢌⡒⠤⢁⠂⠄⢂⠰⣈⢣⢃⠎⡠⢃⠌⠠⠁⠌⡐⠠⠈⠄⠡⢈⠐⠠⢁⣾⣿⣿⣿⣿⣿⣯⣟
⡷⣞⡷⣾⣻⢎⣿⣳⢿⣻⣾⣿⡇⡣⢕⢆⡛⡔⢫⠷⣌⠲⣽⣞⣷⣿⣳⣯⣟⡷⣯⡘⢤⠫⣔⢣⡕⢫⠔⣣⡑⣄⢂⠐⡀⠂⠌⣼⣏⠃⠌⠠⠙⡎⠸⢆⡹⢀⠣⣈⠰⣌⠲⡡⢎⡜⢠⡑⠠⠈⠄⡁⠂⠄⠡⠈⠄⡁⠂⠌⡐⣸⣿⣿⣿⣟⣿⣿⡷⣯
⢿⣽⣻⢷⣯⣟⡾⣽⢯⣿⣿⣿⡇⡹⡌⠮⢴⢩⢣⡟⡤⢛⣼⣟⡾⣿⣟⣷⢯⣿⡽⣟⣧⡳⢌⠣⡜⣡⠚⡤⢓⡌⣗⠺⣤⣣⣜⡷⡎⠐⡈⠄⣑⠂⡁⢂⠙⠪⡱⣌⠳⣌⢣⡑⢎⡜⠢⠐⠡⢈⠐⠠⠁⠌⠠⢁⠂⠄⡁⠂⢴⣿⣿⣿⢷⣻⣿⣿⣟⢷
⠳⡞⢿⢿⡾⣽⣻⣽⣻⢿⣿⣿⡇⢵⢊⡝⣆⢋⠶⣹⢆⡙⣾⣯⣟⣷⣻⣞⣯⡷⣿⣻⢾⡝⣯⢖⡱⢢⡙⡔⢣⠜⣬⢓⠦⣿⣿⣳⢉⢆⡐⢸⡰⢀⠐⠠⢈⠐⠠⢈⠑⠌⠓⡘⠃⠜⡡⢉⡐⠠⠈⠄⠡⢈⠐⠠⢈⠐⠠⣉⠞⠛⠿⣿⢯⣷⣻⡽⣮⣳
⠦⣘⡜⣮⣿⣳⢯⡶⣿⡿⣿⣿⡝⡢⢏⡴⢪⢍⠞⣵⢊⠴⣹⣿⢾⣳⣟⣾⣳⣟⣷⣻⢷⣻⣞⣯⡗⢣⠜⣌⢣⢚⡴⣋⢾⣿⣷⢯⡜⢢⡑⢣⠇⠠⢈⠐⠠⢈⠐⠠⠈⠄⡑⠤⣁⠂⠄⡑⠌⡓⡌⠠⢁⠂⠌⡐⠠⠈⢄⢃⠺⣟⢶⣌⢻⣯⣷⣿⣷⢯
⣿⣳⢿⣯⣷⣯⡿⣽⢶⣻⢿⣿⡧⣙⢎⡴⢋⡜⢮⡝⡎⡜⣹⡿⢯⣷⢯⣟⣿⡾⣯⣟⣯⢷⣻⡽⢌⡣⠞⡤⢃⠎⢶⡙⣮⠙⣎⢣⠚⣥⢊⠵⡈⠐⠠⢈⠐⠠⠈⠄⡁⢂⠐⠠⢀⠣⠐⡀⢂⡐⢡⠂⠄⡈⠐⠠⠁⠌⡜⣼⡆⢹⡆⢿⣆⢹⣿⡿⣝⡫
⣫⣽⡿⣾⣟⣾⣿⡿⣿⣯⣟⣿⡧⢍⠶⣘⢇⡺⣡⢟⡴⣉⢿⣽⣻⡾⣟⡿⣿⣿⣳⣯⣟⡿⢯⠓⣌⢳⡹⡰⣉⠞⡦⣙⠶⣉⢆⢣⡙⢤⢋⠞⠠⢁⠂⠄⡈⠄⡁⢂⠐⠠⢈⠐⡀⢂⠡⠐⠠⠘⠤⡉⢆⠠⢁⠂⡁⡾⢡⣿⣏⡄⢣⢚⣿⡄⣿⣟⣧⢿
⣽⣷⣻⢧⣿⣻⡽⣷⣣⣿⣞⣿⣇⢫⡜⡱⢎⡵⢊⡿⡰⢩⢾⡿⣽⡿⣽⡽⣳⢯⣿⡽⣿⡞⡅⢣⢌⢣⢳⡱⣌⠚⡴⣉⠾⣑⠎⢦⡙⢦⡉⢎⠐⠠⢈⠐⡀⢂⠐⠠⢈⠐⡀⢂⠐⡀⢂⠁⢂⠁⢢⠑⠌⠒⡀⢂⣼⠃⣿⢼⡷⢸⡀⢎⡿⠄⣻⣟⡾⣟
⣿⢾⣯⣟⣾⣽⣿⣳⣟⡾⣽⣾⡇⣇⢚⠵⣩⠖⡭⣞⠥⣋⢾⣟⡿⣽⣷⣻⣽⣻⣾⣟⣿⣳⠈⠆⡌⢂⠣⢱⣎⠓⡰⢡⢏⡇⡚⢤⡙⠦⡙⢆⠈⡐⢀⠂⡐⠠⢈⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡈⠄⠩⢀⠡⠐⣰⣿⠀⣿⢺⣿⠰⡇⠌⡟⢰⡿⣽⣻⡽
⣿⣻⢷⣻⢯⡿⣟⡿⣿⣿⣿⣿⡗⡬⢍⡞⣡⢞⡱⣏⡖⣡⢿⣻⡼⢧⣛⢿⣻⢿⣽⣾⢯⣿⣷⣌⡰⢁⠎⡔⢎⠰⢡⢋⢾⠰⣉⠦⡙⢆⠱⣂⠐⡀⢂⠐⠠⢁⠂⡐⢀⠂⡐⢀⠂⠌⠠⢁⠂⡐⢈⠐⡀⢂⢡⣿⣿⣧⠘⢯⣿⡐⣏⠰⢰⡿⣹⣗⢯⣟
⣿⣻⢯⡿⣿⡽⣞⡽⣯⣿⢿⣿⡧⢱⢎⡼⠱⢎⡱⣏⠖⣡⢾⡿⣽⣏⡟⡾⢭⣛⣾⣻⣿⣾⣳⣟⡿⣷⠎⡜⢢⢁⢃⠎⣇⠳⣌⠲⣉⢆⠳⠌⡆⠐⠠⢈⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡁⢂⠐⡀⢂⡐⢰⠼⣿⢿⣿⡿⣟⣦⢤⡥⣔⢻⡄⣿⡳⢎⡳⣮
⣾⡽⣯⣟⣷⣻⣽⣻⣽⣯⣿⣿⣇⠓⡮⢜⡹⢬⠱⣏⡳⢌⢾⡿⣷⢯⡿⣽⣳⡽⡶⢯⣻⢿⣿⣯⡟⢞⡱⢌⠡⢎⠢⣙⢆⠳⣌⠳⡌⠦⡉⠖⣨⢃⠐⡀⢂⠐⡀⢂⠐⠠⠈⠄⡁⢂⠐⡀⢂⠄⣣⢜⠣⠒⡈⢿⣟⣿⣻⣽⣎⣷⡩⣾⠆⣸⣿⣭⡷⣟
⠥⣫⢕⡛⡞⡽⢳⠟⡷⢯⢾⣿⡧⢹⡘⣥⢋⠶⣙⢮⡓⡜⣺⢿⣽⣻⡽⣷⢯⣷⣟⣯⣟⣯⢿⣽⣚⠆⡘⢄⠣⢌⠢⡍⢎⡱⢌⠳⣌⢣⡙⣌⠲⡌⢆⠐⡀⢂⠐⠠⠈⠄⡁⢂⠰⡀⢎⠴⡡⢎⡱⢎⡑⠠⠐⡈⢿⣿⣟⡷⣯⢞⣷⣹⠇⣼⣷⣯⢿⣽
⠴⣡⢎⡴⣡⠜⣡⢋⡜⣡⠛⠞⢧⠣⡝⡆⢏⡎⡱⢏⡳⡘⢽⠻⢾⢳⢿⣽⣻⢷⣻⣟⣾⡿⣯⣿⢷⣮⣴⣎⣔⣈⠖⡩⢆⡱⢊⠵⣈⠦⡱⢌⠳⡌⡘⡄⠐⠠⠈⠤⣑⢤⠱⣌⠲⡙⣌⠲⡑⢎⠔⡡⠄⡁⢂⠐⡈⢿⣾⣽⣳⢯⣷⢯⡀⣿⣳⣯⢿⣽
⡜⣡⠞⣰⠣⣝⢢⠳⣘⢆⠻⡜⢦⡛⡼⣘⢣⡜⣱⡉⢖⡩⢆⠫⡜⣌⠒⠦⡙⢎⠵⣩⢳⠻⣝⣫⢟⡻⣟⠿⡷⡌⢧⡑⢎⠴⣉⠖⡡⢎⡱⢊⠵⣘⠴⢁⡌⠴⣉⠖⡡⢎⡱⢌⢣⠱⣌⠣⠁⠌⠂⠄⢣⠐⡀⢂⠐⡈⢳⣯⣟⡿⣞⡿⣽⣻⡽⣯⢿⣹
**/